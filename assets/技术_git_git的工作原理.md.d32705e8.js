import{_ as t,c as e,o as i,d as o}from"./app.035b6d40.js";const a="/docs/git/distributed.png",r="/docs/git/snapshots.png",l="/docs/git/areas.png",m=JSON.parse('{"title":"git 的工作原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"分布式版本控制","slug":"分布式版本控制","link":"#分布式版本控制","children":[]},{"level":2,"title":"记录快照","slug":"记录快照","link":"#记录快照","children":[]},{"level":2,"title":"完整性","slug":"完整性","link":"#完整性","children":[]},{"level":2,"title":"容错性","slug":"容错性","link":"#容错性","children":[]},{"level":2,"title":"三种状态","slug":"三种状态","link":"#三种状态","children":[]},{"level":2,"title":"基本流程","slug":"基本流程","link":"#基本流程","children":[]}],"relativePath":"技术/git/git的工作原理.md","lastUpdated":1672735253000}'),s={name:"技术/git/git的工作原理.md"},n=o('<h1 id="git-的工作原理" tabindex="-1">git 的工作原理 <a class="header-anchor" href="#git-的工作原理" aria-hidden="true">#</a></h1><h2 id="分布式版本控制" tabindex="-1">分布式版本控制 <a class="header-anchor" href="#分布式版本控制" aria-hidden="true">#</a></h2><p>每一个客户端都保留完整的文件历史记录。就算服务器发生异常，也能快速恢复。</p><p><img src="'+a+'" alt="分布式版本控制"></p><h2 id="记录快照" tabindex="-1">记录快照 <a class="header-anchor" href="#记录快照" aria-hidden="true">#</a></h2><blockquote><p>在 Git 中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个<strong>快照流</strong>。 <img src="'+r+'" alt="存储项目随时间改变的快照"></p></blockquote><h2 id="完整性" tabindex="-1">完整性 <a class="header-anchor" href="#完整性" aria-hidden="true">#</a></h2><p>Git 中所有数据在存储前都计算校验和， 然后以校验和（可以理解为你提交的commit id）引用. 所以 Git 可以发现你的任何更改。</p><blockquote><p>Git 用来校验和的机制是 SHA-1 散列 （hash）。这是一个由 40个 十六进制字符组成的字符串.</p></blockquote><blockquote><p>Git 数据库中保存的信息都是以文件内容的哈希值来索引</p></blockquote><h2 id="容错性" tabindex="-1">容错性 <a class="header-anchor" href="#容错性" aria-hidden="true">#</a></h2><p>Git 只做 <strong>添加</strong> 数据操作， 意味着 你只要 commit 过的代码，就不可能丢失啦</p><h2 id="三种状态" tabindex="-1">三种状态 <a class="header-anchor" href="#三种状态" aria-hidden="true">#</a></h2><p>Git 将文件标记为三种状态：</p><blockquote><p><strong>已修改（modified）</strong> 标识修改了文件，但还没有提交。</p></blockquote><blockquote><p><strong>已暂存（staged）</strong> 对修改文件做了标记，将包含在下次提交的快照中。简单说，就是 git add 了之后的文件</p></blockquote><blockquote><p><strong>已提交（committed）</strong> 安全的保存到本地数据库了。简单说，就是git commit 了</p></blockquote><p>这也就对应我们常说的，工作区、暂存区、Git目录 <img src="'+l+'" alt="工作目录、暂存区域以及 Git 仓库"></p><blockquote><p><strong>工作区</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p></blockquote><blockquote><p><strong>暂存区</strong>是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</p></blockquote><blockquote><p><strong>Git 仓库目录</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p></blockquote><h2 id="基本流程" tabindex="-1">基本流程 <a class="header-anchor" href="#基本流程" aria-hidden="true">#</a></h2><blockquote><ol><li>在工作区中修改文件。</li><li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。(git add xxx)</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。(git commit xxx)</li></ol></blockquote>',23),c=[n];function d(h,p,g,u,_,b){return i(),e("div",null,c)}const q=t(s,[["render",d]]);export{m as __pageData,q as default};
