import{_ as e,c as a,o,d as r}from"./app.035b6d40.js";const m=JSON.parse('{"title":"Loader","description":"","frontmatter":{},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"第一个loader","slug":"第一个loader","link":"#第一个loader","children":[]}]}],"relativePath":"技术/webpack/loader.md","lastUpdated":1677394720000}'),t={name:"技术/webpack/loader.md"},s=r('<h1 id="loader" tabindex="-1">Loader <a class="header-anchor" href="#loader" aria-hidden="true">#</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h2><p>Loader 是一个 node 的模块，简单的说它应该就是一个函数。可以命名为transform， 因为它的主要功能就是转变代码，转变资源。</p><blockquote><p>loader 是导出为一个函数的 node 模块。该函数在 loader 转换资源的时候调用。给定的函数将调用 Loader API，并通过 this 上下文访问。</p></blockquote><h3 id="第一个loader" tabindex="-1">第一个loader <a class="header-anchor" href="#第一个loader" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">module.export = (content, sourcemap, meta) =&gt; {</span></span>\n<span class="line"><span style="color:#A6ACCD;">    return `${content} ----- hello loader`;</span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>content</strong>, 它就是你的需要编译文件的源码（string），或者是一个二进制文件(buffer);</p><p><strong>sourcemap</strong> 是 可以被 <a href="https://github.com/mozilla/source-map" target="_blank" rel="noreferrer">https://github.com/mozilla/source-map</a> 使用的 SourceMap 数据</p><p><strong>meta</strong> 是任意数据，一般传入AST树</p>',9),n=[s];function l(d,c,p,i,h,_){return o(),a("div",null,n)}const g=e(t,[["render",l]]);export{m as __pageData,g as default};
