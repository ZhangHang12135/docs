import{_ as s,c as a,o as l,a as n}from"./app.bb4f2501.js";const o="/docs/tapable/tapable-type.webp",p="/docs/tapable/tapable-work.webp",g=JSON.parse('{"title":"tapable","description":"","frontmatter":{},"headers":[{"level":2,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[]},{"level":2,"title":"tapable 导出的类","slug":"tapable-导出的类","link":"#tapable-导出的类","children":[{"level":3,"title":"同步，异步分类","slug":"同步-异步分类","link":"#同步-异步分类","children":[]},{"level":3,"title":"工作流程分类","slug":"工作流程分类","link":"#工作流程分类","children":[]}]},{"level":2,"title":"提供的其他方法","slug":"提供的其他方法","link":"#提供的其他方法","children":[{"level":3,"title":"拦截器","slug":"拦截器","link":"#拦截器","children":[]},{"level":3,"title":"HookMap","slug":"hookmap","link":"#hookmap","children":[]},{"level":3,"title":"MultiHook","slug":"multihook","link":"#multihook","children":[]}]}],"relativePath":"技术/webpack/tapable.md","lastUpdated":1691422854000}'),e={name:"技术/webpack/tapable.md"},t=n(`<h1 id="tapable" tabindex="-1">tapable <a class="header-anchor" href="#tapable" aria-hidden="true">#</a></h1><p>tapble 是webpack的一个核心库。它提供了注册各种钩子的函数方法。有一点类似vue中的on, 和emit.</p><p><strong>专注于自定义事件的触发和处理。</strong></p><blockquote><p>这篇文章，可以看作是一个阅读笔记， 具体的了解可以阅读参考文献中的文章。 这是讲述使用的，原理文章参考</p></blockquote><h2 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-hidden="true">#</a></h2><p>这里需要注意一下，ts使用时需要传递泛型， 才能确定参数个数</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化同步钩子</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hook </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SyncHook</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注册事件</span></span>
<span class="line"><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flag1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">arg3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flag1:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg3</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flag2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">arg3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flag2:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arg3</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用事件并传递执行参数</span></span>
<span class="line"><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">19Qingfeng</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">haoyu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#FFCB6B;">flag1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 19Qingfeng wang haoyu</span></span>
<span class="line"><span style="color:#FFCB6B;">flag2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 19Qingfeng wang haoyu</span></span>
<span class="line"></span></code></pre></div><h2 id="tapable-导出的类" tabindex="-1">tapable 导出的类 <a class="header-anchor" href="#tapable-导出的类" aria-hidden="true">#</a></h2><p>这里我简单说一下，具体示例可以看<a href="https://zhuanlan.zhihu.com/p/470657214" target="_blank" rel="noreferrer">参考文献1</a>;</p><ul><li>SyncHook, 同步类型， 最基础的钩子</li><li>SyncBailHook, 如果任何事件函数存在返回值，那么会立即中断后续事件函数的调用：</li><li>SyncWaterfallHook 瀑布钩子会将上一个函数的返回值传递给下一个函数作为参数</li><li>SyncLoopHook 会在任意一个被监听的函数存在非 undefined 返回值时返回重头开始执行</li><li>AsyncSeriesHook 表示异步串联执行</li><li>AsyncSeriesBailHook 表示异步串行保险钩子</li><li>AsyncSeriesWaterfallHook 异步串行瀑布钩子</li><li>AsyncSeriesLoopHook 异步串行循环钩子</li><li>AsyncParallelHook 异步并行钩子，会并发执行所有异步钩子</li><li>AsyncParallelBailHook 这个钩子就比较有意思了，异步并行保险钩子。</li></ul><p><a href="https://github.com/webpack/tapable#hook-types" target="_blank" rel="noreferrer">具体可以直接看这个, 官方readme</a></p><p>两种分类模式：</p><h3 id="同步-异步分类" tabindex="-1">同步，异步分类 <a class="header-anchor" href="#同步-异步分类" aria-hidden="true">#</a></h3><p><img src="`+o+'" alt="异步同步分类"> 针对同步钩子来 tap 方法是唯一的注册事件的方法，通过 call 方法触发同步钩子的执行。 异步钩子可以通过 tap、tapAsync、tapPromise三种方式来注册，同时可以通过对应的 call、callAsync、promise 三种方式来触发注册的函数。</p><p>这个就比较简单， 按照提供的方法名就可以区分</p><ul><li>Sync[xx] 同步钩子， 具体有 SyncHook, SyncBailHook, SyncWaterfallHook， SyncLoopHook</li><li>AsyncSeries[xx] 异步串行, 具体有 AsyncSeriesHook, AsyncSeriesBailHook, AsyncSeriesLoopHook, AsyncSeriesWaterfallHook</li><li>AsyncParallel[xx] 异步并行， 具体有 AsyncParallelHook, AsyncParallelBailHook</li></ul><h3 id="工作流程分类" tabindex="-1">工作流程分类 <a class="header-anchor" href="#工作流程分类" aria-hidden="true">#</a></h3><p><img src="'+p+`" alt="工作流程分类"></p><ul><li><strong>Basic Hook</strong> : 基本类型的钩子，它仅仅执行钩子注册的事件，并不关心每个被调用的事件函数返回值如何。</li><li><strong>Waterfall</strong> : 瀑布类型的钩子，瀑布类型的钩子和基本类型的钩子基本类似，唯一不同的是瀑布类型的钩子会在注册的事件执行时将事件函数执行非 undefined 的返回值传递给接下来的事件函数作为参数。</li><li><strong>Bail</strong> : 保险类型钩子，保险类型钩子在基础类型钩子上增加了一种保险机制，如果任意一个注册函数执行返回非 undefined 的值，那么整个钩子执行过程会立即中断，之后注册事件函数就不会被调用了。</li><li><strong>Loop</strong> : 循环类型钩子，循环类型钩子稍微比较复杂一点。循环类型钩子通过 call 调用时，如果任意一个注册的事件函数返回值非 undefeind ,那么会立即重头开始重新执行所有的注册事件函数，直到所有被注册的事件函数都返回 undefined。</li></ul><h2 id="提供的其他方法" tabindex="-1">提供的其他方法 <a class="header-anchor" href="#提供的其他方法" aria-hidden="true">#</a></h2><h3 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-hidden="true">#</a></h3><p>可以类似axios 一样，在各种阶段执行任务 我们可以通过拦截器对整个 Tapable 发布/订阅流程进行监听，从而触发对应的逻辑。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const hook = new SyncHook([&#39;arg1&#39;, &#39;arg2&#39;, &#39;arg3&#39;]);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">hook.intercept({</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 每次调用 hook 实例的 tap() 方法注册回调函数时, 都会调用该方法,</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 并且接受 tap 作为参数, 还可以对 tap 进行修改;</span></span>
<span class="line"><span style="color:#A6ACCD;">  register: (tapInfo) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(\`\${tapInfo.name} is doing its job\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">    return tapInfo; // may return a new tapInfo object</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 通过hook实例对象上的call方法时候触发拦截器</span></span>
<span class="line"><span style="color:#A6ACCD;">  call: (arg1, arg2, arg3) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;Starting to calculate routes&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 在调用被注册的每一个事件函数之前执行</span></span>
<span class="line"><span style="color:#A6ACCD;">  tap: (tap) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(tap, &#39;tap&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  // loop类型钩子中 每个事件函数被调用前触发该拦截器方法</span></span>
<span class="line"><span style="color:#A6ACCD;">  loop: (...args) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(args, &#39;loop&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>register: 每次通过 tap、tapAsync、tapPromise 方法注册事件函数时，会触发 register 拦截器。这个拦截器中接受注册的 Tap 作为参数，同时可以对于注册的事件进行修改。</li><li>call: 通过调用 hook 实例对象的 call 方法时执行。（包括 callAsync, promise）接受的参数为调用 Hook 时传入的参数。</li><li>tap: 在每一个被注册的事件函数调用之前执行，接受参数为对应的 Tap 对象。</li><li>loop: loop类型钩子中 每次重新开始 loop 之前会执行该拦截器，拦截器函数接受的参数为调用时传入的参数。</li></ul><h3 id="hookmap" tabindex="-1">HookMap <a class="header-anchor" href="#hookmap" aria-hidden="true">#</a></h3><p>创建hook的一个对象，来管理</p><h3 id="multihook" tabindex="-1">MultiHook <a class="header-anchor" href="#multihook" aria-hidden="true">#</a></h3><p>创建批量的hook, 来统一处理</p><p>参考文献：</p><p><a href="https://zhuanlan.zhihu.com/p/470657214" target="_blank" rel="noreferrer">深度解析webpack核心模块 - 详细</a></p><p><a href="https://juejin.cn/post/7164175171358556173?searchId=20230805153604FB6BFEAFFE47629AAFD8#heading-10" target="_blank" rel="noreferrer">tapable源码解析-简版</a></p>`,31),r=[t];function c(i,y,D,A,C,F){return l(),a("div",null,r)}const d=s(e,[["render",c]]);export{g as __pageData,d as default};
