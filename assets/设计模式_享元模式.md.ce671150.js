import{_ as e,c as a,o as t,d as s}from"./app.54daa136.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"享元模式的定义","slug":"享元模式的定义","link":"#享元模式的定义","children":[]},{"level":2,"title":"内部状态与外部状态","slug":"内部状态与外部状态","link":"#内部状态与外部状态","children":[]},{"level":2,"title":"文件上传的例子","slug":"文件上传的例子","link":"#文件上传的例子","children":[]}],"relativePath":"设计模式/享元模式.md","lastUpdated":1688888427000}'),l={name:"设计模式/享元模式.md"},i=s('<h2 id="享元模式的定义" tabindex="-1">享元模式的定义 <a class="header-anchor" href="#享元模式的定义" aria-hidden="true">#</a></h2><p><strong>享元模式是一种用于性能优化的模式</strong></p><p><strong>运用共享技术来有效支持大量细粒度的对象</strong></p><h2 id="内部状态与外部状态" tabindex="-1">内部状态与外部状态 <a class="header-anchor" href="#内部状态与外部状态" aria-hidden="true">#</a></h2><p>享元模式将对象的属性划分为内部状态和外部状态。</p><ul><li>内部状态存储于对象内部</li><li>内部状态可以被一些对象共享</li><li>内部状态独立于具体场景，通常不会改变</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</li></ul><p>剥离了外部状态的对象成为共享对象，外部状态在必要时传入共享对象来组装成与一个完整的对象。这就是一个时间换空间的优化模式。</p><h2 id="文件上传的例子" tabindex="-1">文件上传的例子 <a class="header-anchor" href="#文件上传的例子" aria-hidden="true">#</a></h2><p>现在我们写下文件上传的代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"></span></code></pre></div>',10),n=[i];function r(d,c,o,p,_,h){return t(),a("div",null,n)}const f=e(l,[["render",r]]);export{g as __pageData,f as default};
